#version 330 core

uniform mat4 model;
uniform vec3 camP;

uniform vec3 lP;
uniform vec3 lC;
uniform float atten;
uniform float ambCE;
uniform float matS;
uniform vec3 matSpec;


// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 fVert;
in vec3 fNorm;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D tC;
uniform sampler2D tN;

void main(){
  vec3 normal = normalize(transpose(inverse(mat3(model))) * fNorm);
    vec3 surfacePos = vec3(model * vec4(fVert, 1));
    vec4 surfaceColor = texture(tC, UV);
    vec3 surfaceToLight = normalize(lP - surfacePos);
    vec3 surfaceToCamera = normalize(camP - surfacePos);
    
    //ambient
    vec3 ambient = ambCE * surfaceColor.rgb * lC;

    //diffuse
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * lC;
    
    //specular
    float specularCoefficient = 0.0;
    if(diffuseCoefficient > 0.0)
        specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), matS);
    vec3 specular = specularCoefficient * matSpec* lC;
    
    //attenuation
    float distanceToLight = length(lP - surfacePos);
    float attenuation = 1.0 / (1.0 + atten * pow(distanceToLight, 2));

    //linear color (color before gamma correction)
    vec3 linearColor = ambient + attenuation*(diffuse + specular);
    
    //final color (after gamma correction)
    vec3 gamma = vec3(1.0/2.2);
    color = vec3(pow(linearColor, gamma));
}